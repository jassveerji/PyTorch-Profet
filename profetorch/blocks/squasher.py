# AUTOGENERATED! DO NOT EDIT! File to edit: Squasher.ipynb (unless otherwise specified).

__all__ = ['Squasher']

# Cell
import numpy as np
import matplotlib.pyplot as plt

import torch
import torch.nn as nn
import torch.nn.functional as F

torch.Tensor.ndim = property(lambda x: x.dim())

# Cell
# export
class Squasher(nn.Module):
    """
    Squashes output to lie beween `high` and `low`.
    """
    def __init__(self, low=None, high=None, mean=0, sd=1, alpha=0.01):
        super().__init__()
        if low is not None:
            low = (low - mean) / sd
        if high is not None:
            high = (high - mean) / sd
        self.L, self.H, self.alpha = low, high, alpha

    def forward(self, t):
        if self.L is not None:
            t[t < self.L] = self.alpha * (t[t < self.L] - self.L) + self.L
        if self.H is not None:
            t[t > self.H] = self.alpha * (t[t > self.H] - self.H) + self.H
        return t